generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider          = "prisma-zod-generator"
  output            = "./generated-zod-schemas"
  isGenerateSelect  = "true"
  isGenerateInclude = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement())
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt?
  ip_address    String? @db.VarChar(45)
  user_agent    String?
  payload       String
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model team_invitations {
  id         BigInt    @id @default(autoincrement())
  team_id    BigInt
  email      String    @db.VarChar(255)
  role       String?   @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  teams      teams     @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "team_invitations_team_id_foreign")

  @@unique([team_id, email], map: "team_invitations_team_id_email_unique")
}

model team_user {
  id         BigInt    @id @default(autoincrement())
  team_id    BigInt
  user_id    BigInt
  role       String?   @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@unique([team_id, user_id], map: "team_user_team_id_user_id_unique")
}

model teams {
  id               BigInt             @id @default(autoincrement())
  user_id          BigInt
  name             String             @db.VarChar(255)
  personal_team    Boolean
  created_at       DateTime?          @db.Timestamp(0)
  updated_at       DateTime?          @db.Timestamp(0)
  team_invitations team_invitations[]

  @@index([user_id], map: "teams_user_id_index")
}

model users {
  id                        BigInt    @id @default(autoincrement())
  name                      String    @db.VarChar(255)
  email                     String    @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at         DateTime? @db.Timestamp(0)
  password                  String    @db.VarChar(255)
  remember_token            String?   @db.VarChar(100)
  current_team_id           BigInt?
  profile_photo_path        String?   @db.VarChar(2048)
  created_at                DateTime? @db.Timestamp(0)
  updated_at                DateTime? @db.Timestamp(0)
  two_factor_secret         String?
  two_factor_recovery_codes String?
  two_factor_confirmed_at   DateTime? @db.Timestamp(0)
}

model AuthUser {
  id           String        @id @unique
  auth_session AuthSession[]
  auth_key     AuthKey[]
  name         String        @db.VarChar(255)
  email        String        @unique(map: "auth_user_email_unique") @db.VarChar(255)

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}
